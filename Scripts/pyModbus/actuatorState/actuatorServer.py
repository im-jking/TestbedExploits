#------------------------------------------------------------------------------------------------#
#                                actuatorServer.py                                               #
# A Modbus server program that creates and maintains register data.                              #
# Identical to the testServer.py program, but prints coil contents on exit.                      #
# Help from stackoverflow.com/questions/76261295/how-do-i-make-a-modbus-simulation               #
#                                                                                                #
#------------------------------------------------------------------------------------------------#

import atexit
import random
from pymodbus.datastore import ModbusSequentialDataBlock, ModbusSlaveContext, ModbusServerContext
from pymodbus.server.async_io import StartTcpServer

def main():
    # IP address of server machine is hard-coded
    ip = "192.168.56.106"

    # Create data blocks with default values for each register type in Modbus
    coils = ModbusSequentialDataBlock(1, [True] * 8)
    discrete_inputs = ModbusSequentialDataBlock(1, [False] * 8)
    holding_registers = ModbusSequentialDataBlock(1, [0] * 8)
    input_registers = ModbusSequentialDataBlock(1, [0] * 8)

    # Create a new slave context for this server
    slave_context = ModbusSlaveContext(
        di = discrete_inputs,
        co = coils,
        hr = holding_registers,
        ir = input_registers
    )

    # Set the holding registers to random values
    tempValues = [random.randint(1,15) for _ in range(10)]
    holding_registers.setValues(1, tempValues)

    # Create a new server context using the slave context. Treated as a single context
    server_context = ModbusServerContext(slaves=slave_context, single=True)

    # When server is closed, print coil status
    atexit.register(PrintCoils(coils))
    # Start the server at the given IP address and port
    StartTcpServer(context=server_context,address=(ip,5502))

# Function to print coil status
def PrintCoils(coils):
    print(coils)

main()