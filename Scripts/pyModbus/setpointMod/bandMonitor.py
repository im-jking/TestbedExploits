#------------------------------------------------------------------------------------------------#
#                                bandMonitor.py                                                  #
# A program made to monitor and print network activity on a Modbus network.                      #
# If the specified server network transmission is exceeded, triggers the server's alarm coil.    #
#                                                                                                #
#------------------------------------------------------------------------------------------------#

import psutil
from pymodbus.client.tcp import ModbusTcpClient
import time

#Connect to the local TCP server; change according to system
ip = "192.168.100.5"
server = ModbusTcpClient(ip,port="5502")

#Recent transmission list setup
i = 0
recentSent = []

#Set the initial benchmark for network usage
lastRecv = psutil.net_io_counters().bytes_recv
lastSent = psutil.net_io_counters().bytes_sent
lastTotal = lastSent + lastRecv

while True:
    #Get the total number of bytes on the network at the start of this iteration
    newRecv = psutil.net_io_counters().bytes_recv
    newSent = psutil.net_io_counters().bytes_sent
    newTotal = newRecv + newSent

    #Calculate difference in network usage, convert to KB
    kbRecv = (newRecv - lastRecv) / 1024
    kbSent = (newSent - lastSent) / 1024
    kbTotal = (newTotal - lastTotal) / 1024

    #Set the last variables for the next iteration
    lastRecv = newRecv
    lastSent = newSent
    lastTotal = newTotal

    #Basic print for KB received, sent, and total
    print(f"{kbRecv:.2f} KB received, {kbSent:.2f} KB Sent, {kbTotal:.2f} KB Total")

    #Maintain a list of ten most recent payloads sent, sum them together to see how much data has been sent recently
    if(len(recentSent) > i):
        recentSent[i] = kbSent
    else:
        recentSent.append(kbSent)
    i = (i + 1) % 10

    alarmPoint = sum(server.read_holding_registers(address=9,count=1).registers)

    #If more than the allowable amount of data has been pulled off the machine in 100-second period
    if(sum(recentSent) > alarmPoint):
        #Set the alarm condition
        server.write_coil(0, True)
        #Print alarm info to the bandwidth monitoring console
        print(f"Alarm triggered! sum of recentSent = {sum(recentSent)}, alarmPoint = {alarmPoint}")
    else:
        #Remove the alarm condition
        server.write_coil(0, False)

    #Wait ten seconds for the next update
    time.sleep(10)