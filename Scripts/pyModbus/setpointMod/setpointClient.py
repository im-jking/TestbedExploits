#------------------------------------------------------------------------------------------------#
#                                setpointClient.py                                               #
# A Modbus client program that collects and prints register data from a Modbus server.           #
# Identical to testClient.py program, but server IP is hardcoded and network alarm is printed    #
# when triggered.
#                                                                                                #
#------------------------------------------------------------------------------------------------#

import atexit
from pymodbus.client.tcp import ModbusTcpClient
import sys
import time

#Set the intended server IP from first program parameter
#ip = str(sys.argv[1])
#Or simply set to target device for quick testing
ip = "192.168.100.5"

#Connect to the proper TCP server on port 5502
server = ModbusTcpClient(ip,port="5502")

#Main loop
def main():
    #Close server before exiting
    atexit.register(serverClose)

    while True:
        #Read some data from each memory section of the server
        coils = server.read_coils(address=0, count=10)
        discrete_inputs = server.read_discrete_inputs(address=0, count=10)
        holding_registers = server.read_holding_registers(address=0, count=10)
        input_registers = server.read_input_registers(address=0, count=10)

        #Check whether there was a coil read failure
        if coils.isError():
            print(f"Error getting coils: {coils}")
            raise Exception(f"Error getting coils: {coils}")

        #Print all of the server data
        print("Coils: ", coils.bits)
        print("Discrete Inputs: ", discrete_inputs.bits)
        print("Holding Registers: ", holding_registers.registers)
        print("Input Registers: ", input_registers.registers)

        #Check whether the alarm coil is true; if so, display alarm condition to client
        if(coils.bits[0]):
            print("\nWATCH OUT!!! TOO MUCH DATA IS BEING EXPORTED!!! SOMEONE MAY BE STEALING IT!!!\n")

        time.sleep(5)

def serverClose():
    server.close()

main()